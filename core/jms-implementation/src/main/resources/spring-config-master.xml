<?xml version="1.0" encoding="UTF-8" ?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:p="http://www.springframework.org/schema/p" xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans-2.5.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-2.5.xsd">

    <!-- Import common beans -->
    <import resource="spring-config-common.xml"/>
    <import resource="spring-config-jobs.xml"/>
    <import resource="spring-config-servers.xml"/>

    <!-- Starts up parallel workers.  Used by the queueJumper bean, which starts up
    a new parallel worker each time a parallel TaskExecution is run. -->
    <bean id="parallelWorkerRunner" class="uk.ac.ebi.interpro.scan.jms.master.queuejumper.platforms.SubmissionWorkerRunner">
        <property name="optionalPrefix" value="ssh -x ${unix.username}@${mvn.lsf.submission.hostname}"/>
        <property name="submissionJobFile" ref="lsfParallelFile"/>
        <property name="submissionType" value="lsf"/>
    </bean>

    <!-- Starts up a serial worker using the Sun Grid Engine.  Used by the broker bean to start up a single multi-use worker.
         The shellPath is optional and defaults to the Bourne shell /bin/sh if not set.-->
    <bean id="serialWorkerRunnerSGE" class="uk.ac.ebi.interpro.scan.jms.master.queuejumper.platforms.SubmissionWorkerRunner">
        <property name="optionalPrefix" value="ssh -x ${unix.username}@${mvn.sge.submission.hostname}"/>
        <property name="shellPath" value = "/bin/bash"/>
        <property name="submissionJobFile" ref="sgeExecutionFile"/>
        <property name="submissionType" value="sge"/>
    </bean>

    <!-- Starts up a serial worker using the Portable Batch System.  Used by the broker bean to start up a single multi-use worker.
         The shellPath is optional and defaults to the user's login shell if not set.-->
    <bean id="serialWorkerRunnerPBS" class="uk.ac.ebi.interpro.scan.jms.master.queuejumper.platforms.SubmissionWorkerRunner">
        <property name="optionalPrefix" value="ssh -x ${unix.username}@${mvn.pbs.submission.hostname}"/>
        <property name="shellPath" value = "/bin/bash"/>
        <property name="submissionJobFile" ref="pbsExecutionFile"/>
        <property name="submissionType" value="pbs"/>
    </bean>

    <!-- Starts up a serial worker on a local machine (defined in spring-config-servers.xml).  Used by the lanBroker bean to start up a single multi-use worker. -->
    <bean id="lanWorkerRunner" class="uk.ac.ebi.interpro.scan.jms.master.queuejumper.platforms.LANWorkerRunner">
        <property name="command"
                  value='${maven.home} -e -P runParallelWorker -f ${basedir}/pom.xml exec:java ${mvn.parallel.worker.xmx}'/>
        <property name="accessPrefix" value="ssh -x ${unix.username}"/>
        <property name="lanServerListing" ref="serverNames"/>
    </bean>

    <!--<bean id="lanBroker" class="uk.ac.ebi.interpro.scan.jms.broker.OnionBroker">-->            
        <!--<property name="serialWorkerRunner" ref="lanWorkerRunner"/>-->
        <!--<property name="connectionConfigurationXml" value="hornetq-configuration.xml"/>-->
        <!--<property name="queueJumper" ref="queueJumper"/>-->
        <!--<property name="jmsConfigurationXml" value="hornetq-jms.xml"/>-->
    <!--</bean>-->

    <!--<bean id="sgeBroker" class="uk.ac.ebi.interpro.scan.jms.broker.OnionBroker">-->
        <!--<property name="serialWorkerRunner" ref="serialWorkerRunnerSGE"/>-->
        <!--<property name="connectionConfigurationXml" value="hornetq-configuration.xml"/>-->
        <!--<property name="queueJumper" ref="queueJumper"/>-->
        <!--<property name="jmsConfigurationXml" value="hornetq-jms.xml"/>-->
    <!--</bean>-->

    <!--<bean id="pbsBroker" class="uk.ac.ebi.interpro.scan.jms.broker.OnionBroker">-->
        <!--<property name="serialWorkerRunner" ref="serialWorkerRunnerPBS"/>-->
        <!--<property name="connectionConfigurationXml" value="hornetq-configuration.xml"/>-->
        <!--<property name="queueJumper" ref="queueJumper"/>-->
        <!--<property name="jmsConfigurationXml" value="hornetq-jms.xml"/>-->
    <!--</bean>-->

    <!--<bean id="broker" class="uk.ac.ebi.interpro.scan.jms.broker.OnionBroker">-->
        <!--<property name="serialWorkerRunner" ref="serialWorkerRunner"/>-->
        <!--<property name="connectionConfigurationXml" value="hornetq-configuration.xml"/>-->
        <!--<property name="queueJumper" ref="queueJumper"/>-->
        <!--<property name="jmsConfigurationXml" value="hornetq-jms.xml"/>-->
    <!--</bean>-->

    <bean id="sgeExecutionFile" class="org.springframework.core.io.ClassPathResource">
        <constructor-arg value="sge_exec.sh" />
    </bean>

    <bean id="pbsExecutionFile" class="org.springframework.core.io.ClassPathResource">
        <constructor-arg value="pbs_exec.sh" />
    </bean>

    <bean id="lsfParallelFile" class="org.springframework.core.io.FileSystemResource">
        <constructor-arg value="scripts/lsf_exec.sh" />
    </bean>


    <bean id="master" class="uk.ac.ebi.interpro.scan.jms.master.InterProScanMaster">
        <property name="jobs" ref="jobs"/>

        <!-- The following properties are just for the 'hacked' demonstration. (Loading proteins
        and Pfam models prior to running the analysis. -->
        <property name="pfamHMMfilePath" value="/ebi/production/interpro/data/members/PFAM_HMMER3/24.0/Pfam-A.hmm"/>
        <property name="gene3dModel2SfFile">
            <bean class="org.springframework.core.io.FileSystemResource">
                <constructor-arg value="/ebi/production/interpro/data/members/gene3d/3.3.0/model2sf_map.csv"/>
            </bean>
        </property>
        <property name="stepInstanceDAO" ref="stepInstanceDAO"/>
        <property name="stepExecutionDAO" ref="stepExecutionDAO"/>
        <property name="signatureLibraryReleaseDAO" ref="signatureLibraryReleaseDAO"/>
        <property name="connectionFactory" ref="connectionFactory"/>
        <property name="workerJobResponseQueueName" value="jms.queue.${mvn.worker.job.response.queue}"/>
        <property name="parallelWorkerRunner" ref="parallelWorkerRunner"/>
        <property name="workerJobRequestQueueName" value="jms.queue.${mvn.worker.job.request.queue}"/>
    </bean>

    <!-- Quartz Scheduler - contains list of Quartz jobs. -->
    <bean class="org.springframework.scheduling.quartz.SchedulerFactoryBean">
        <property name="triggers">
            <list>
                <ref bean="proteinLoadTrigger"/>
                <ref bean="startSpareParallelWorkerTrigger"/>
            </list>
        </property>
    </bean>



    <bean id="proteinLoadQuartzJob" class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">
        <property name="targetObject" ref="master"/>
        <property name="targetMethod" value="createProteinLoadJob"/>
    </bean>

    <bean id="proteinLoadTrigger" class="org.springframework.scheduling.quartz.SimpleTriggerBean">
        <property name="jobDetail" ref="proteinLoadQuartzJob"/>
        <property name="startDelay" value="0"/>
        <!-- repeat every 30 minutes -->
        <property name="repeatInterval" value="180000"/>
    </bean>



    <!-- Quartz job to run spare parallel worker.  Currently turned on. -->
    <bean id="startSpareParallelWorkerQuartzJob" class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">
        <property name="targetObject" ref="parallelWorkerRunner"/>
        <property name="targetMethod" value="startupNewWorker"/>
    </bean>

    <bean id="startSpareParallelWorkerTrigger" class="org.springframework.scheduling.quartz.SimpleTriggerBean">
        <property name="jobDetail" ref="startSpareParallelWorkerQuartzJob"/>
        <property name="startDelay" value="60000"/>
        <!-- repeat every minute -->
        <property name="repeatInterval" value="60000"/>
    </bean>
</beans>

